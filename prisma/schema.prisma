generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String?        @unique
  image         String?
  emailVerified DateTime?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @default(now())
  accounts      Account[]
  chats         Chat[]
  goals         Goal[]
  Habit         Habit[]
  planners      Planner[]
  sessions      Session[]
  tasks         Task[]
  learningPlan  LearningPlan[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Goal {
  id             String        @id @default(cuid())
  title          String
  createdAt      DateTime      @default(now())
  userId         String
  hoursPerDay    Int
  targetWeeks    Int
  preferredTime  DateTime      @default(dbgenerated("CURRENT_DATE + interval '10 hours'"))
  updatedAt      DateTime      @default(now())
  user           User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  habits         Habit[]
  planners       Planner[]
  learningPlanId String?       @unique
  learningPlan   LearningPlan?

  @@index([userId])
}

model Planner {
  id             String       @id @default(cuid())
  userId         String
  goalId         String
  learningPlanId String
  title          String
  description    String?
  startDate      DateTime?
  endDate        DateTime?
  roadmap        Json?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @default(now())
  progress       Int          @default(0)
  Habit          Habit[]
  goal           Goal         @relation(fields: [goalId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  learningPlan   LearningPlan @relation(fields: [learningPlanId], references: [id], onDelete: Cascade)
  tasks          Task[]

  @@index([userId])
  @@index([goalId])
  @@index([startDate, endDate])
}

model Task {
  id             String     @id @default(cuid())
  userId         String
  plannerId      String
  learningPlanId String
  title          String
  description    String?
  dueDate        DateTime?
  preferredTime  DateTime   @default(dbgenerated("CURRENT_DATE + interval '10 hours'"))
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @default(now())
  completedAt    DateTime?
  status         TaskStatus @default(PENDING)

  planner      Planner      @relation(fields: [plannerId], references: [id], onDelete: Cascade)
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  learningPlan LearningPlan @relation(fields: [learningPlanId], references: [id], onDelete: Cascade)
  checklists   Checklist[]

  @@index([plannerId])
  @@index([userId])
}

model Checklist {
  id           String     @id @default(cuid())
  taskId       String
  title        String
  description  String?
  expectedTime String? // storing as string like "1 hour" (can change to Int for minutes if you prefer)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @default(now())
  status       TaskStatus @default(PENDING)

  task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@index([taskId])
}

model Habit {
  id             String          @id @default(cuid())
  goalId         String
  learningPlanId String
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @default(now())
  description    String?
  name           String
  progress       Int             @default(0)
  userId         String
  frequency      HabitFrequency  @default(DAILY)
  Goal           Goal?           @relation(fields: [goalId], references: [id], onDelete: Cascade)
  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  learningPlan   LearningPlan    @relation(fields: [learningPlanId], references: [id], onDelete: Cascade)
  completions    HabitProgress[]
  Planner        Planner?        @relation(fields: [plannerId], references: [id])
  plannerId      String?

  @@index([userId])
}

model HabitProgress {
  id        String   @id @default(cuid())
  habitId   String
  date      DateTime
  completed Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  habit     Habit    @relation(fields: [habitId], references: [id], onDelete: Cascade)

  @@unique([habitId, date])
  @@index([date])
}

model Chat {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  title     String?
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages  Message[]
}

model Message {
  id        String   @id @default(uuid())
  chatId    String
  role      String
  content   String
  createdAt DateTime @default(now())
  chat      Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  SKIPPED
}

enum HabitFrequency {
  DAILY
  WEEKLY
}

model LearningPlan {
  id          String    @id @default(cuid())
  userId      String
  goalId      String    @unique
  topic       String
  planner     Json
  task_list   Json
  habits_list Json
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  planners    Planner[]
  tasks       Task[]
  habits      Habit[]

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  goal Goal @relation(fields: [goalId], references: [id], onDelete: Cascade)
}
