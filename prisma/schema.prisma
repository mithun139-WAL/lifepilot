generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  image         String?
  emailVerified DateTime?
  accounts      Account[]
  sessions      Session[]
  chats         Chat[] 
  goals         Goal[]
  planners      Planner[]
  tasks         Task[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  Habit     Habit[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Goal {
  id          String @id @default(cuid())
  userId      String
  title       String
  targetDays  Int
  hoursPerDay Int

  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  planners Planner[]
  habits   Habit[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@index([userId])
}

model Planner {
  id     String @id @default(cuid())
  userId String
  goalId String

  title       String
  description String?
  startDate   DateTime?
  endDate     DateTime?
  roadmap     Json?
  progress    Int       @default(0)

  user  User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  goal  Goal   @relation(fields: [goalId], references: [id], onDelete: Cascade)
  tasks Task[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  Habit     Habit[]

  @@index([userId])
  @@index([goalId])
  @@index([startDate, endDate])
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  SKIPPED
}

model Task {
  id        String @id @default(cuid())
  plannerId String
  userId    String

  title       String
  description String?
  status      TaskStatus @default(PENDING)
  dueDate     DateTime?
  completedAt DateTime?

  planner Planner @relation(fields: [plannerId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@index([plannerId])
  @@index([userId])
}

enum HabitFrequency {
  DAILY
  WEEKLY
}

model Habit {
  id        String @id @default(cuid())
  plannerId String
  userId    String

  name        String
  description String?
  frequency   HabitFrequency @default(DAILY) // daily, weekly etc.
  progress    Int            @default(0)

  planner Planner @relation(fields: [plannerId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Track completions separately
  completions HabitProgress[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  Goal      Goal?    @relation(fields: [goalId], references: [id])
  goalId    String?

  @@index([plannerId])
  @@index([userId])
}

model HabitProgress {
  id        String   @id @default(cuid())
  habitId   String
  date      DateTime
  completed Boolean  @default(false)

  habit Habit @relation(fields: [habitId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@unique([habitId, date])
  @@index([date])
}

model Chat {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  title     String?
  userId    String 
  user      User     @relation(fields: [userId], references: [id])
  messages  Message[]
}

model Message {
  id        String   @id @default(uuid())
  chat      Chat     @relation(fields: [chatId], references: [id])
  chatId    String
  role      String
  content   String
  createdAt DateTime @default(now())
}
